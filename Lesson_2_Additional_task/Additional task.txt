//TODO: Add up to 30 line to task.txt. 

IMPORTANT: All additions must be done by pulling branches into master one at a time and resolving merge conflicts. 

Create 5 branches -> commit a section to each -> switch to master -> pull from this branches and resolve merge conflicts 

Max of 5 lines can be added to one branch

2. Tracks file changes
3. Manages project history
4. Developers use daily
5. Distributed version control

6. Repository stores code
7. Commits save snapshots
8. Branches create experiments
9. Merge combines work
10. Conflicts need resolve

11. Staging area buffer
12. Index before commit
13. Reset moves head
14. Hard reset dangerous
15. Soft reset safe

16. Mixed reset default
17. Checkout switches branch
18. Clone copies repo
19. Pull gets updates
20. Push shares changes

21. Fetch downloads commits
22. Rebase rewrites history
23. Tag marks versions
24. Log shows commits
25. Status shows state

26. Diff shows changes
27. Init starts repo
28. Add stages files
29. Rm removes files
30. Mv renames files

31. Ignore hides files
32. Remote adds origin
33. Origin main server
34. Fork copies project
35. Upstream original source

36. SHA identifies commit
37. Head points latest
38. Detached head state
39. Amend fixes commit
40. Cherry pick commit

41. Bisect finds bug
42. Reflog records moves
43. Blame shows authors
44. Config sets user
45. Alias short commands

46. Branch naming convention
47. Main default branch
48. Master old name
49. Feature branch work
50. Hotfix urgent bug

51. Release branch prep
52. Merge fast forward
53. Squash combine commits
54. Revert undoes commit
55. Stash saves work

56. Pop applies stash
57. Drop deletes stash
58. Clean removes untracked
59. GC optimizes repo
60. Hooks run scripts

61. Pre commit check
62. Post merge task
63. Workflow defines process
64. CI uses git
65. GitHub hosts repos

66. GitLab alternative host
67. Bitbucket another host
68. SSH keys auth
69. HTTPS access repo
70. PAT token login

71. Open source free
72. Cross platform tool
73. Command line interface
74. GUI clients exist
75. VSCode integrates git

76. History tree view
77. Commit message style
78. Conventional commits rule
79. Squash merge option
80. Fast workflows exist

81. Team collaboration tool
82. Open pull request
83. Review code changes
84. Approve or reject
85. Merge after review

86. Signed commits verify
87. GPG keys security
88. Submodules external repos
89. Large files LFS
90. Binary files tricky

91. Tag release version
92. Semantic versioning common
93. Rollback old commit
94. Branch protection rules
95. Force push danger

96. Keep history clean
97. Rebase interactive edit
98. Autosquash fixups easy
99. Upstream sync branch
100. Downstream forks update

101. Commit often habit
102. Push regularly backup
103. Pull frequently sync
104. Resolve conflicts carefully
105. Celebrate merged PR